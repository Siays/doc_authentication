1. soft deleted document recovery
2. deleted log (unable to recover), happen upon: replaced, in soft_deleted status >predefined duration




if success proceed to update edit
if failed : 1. soft_delete_conflict, prompt comfirmation before continue
            2. conflict, stop the user from proceed


edit page , new document and authenticatedocindex, editdocindex  ic validation


edit page, if the fields has no changes, disable comfirm button
1. what if the user editted but input same thing?
2. add a modal / checkbox to inform user upon confirmation the issuer name and id will changed to current logged in
3. specifically check which fields are changed. 



notification list
currently: from old to new
the latest delete without refresh, appear to be error in notification


1. notification bell  (authenticated layout)
2. on user clicked delete, prompt a confirmation message, if user confirm, delete the rec, send the rec to trasheddoc and send notification to superuser
3. edit doc page 
4. trashed doc recover



authenticate doc
1. pagination
2. setState ( doc list depend on ic and type inputted.)



home page
1. filter list








1. understand how useReducer work
2. add arrow for navigate back to one hierarchy up
3. backend validation


















Solved
login
1. logout function haven't link
4. logged in but able to navigate back to /login, which suppose to back to home-page
6. On log out, still stay in home-page, also able to navigate back to home-page after logged out




7. what if the user is halfway entering data and refresh the page?


âœ… 7. What If User is Mid-Form and Refreshes the Page?
This is a broader UX concern and not specific to auth â€” form state is always lost on full refresh unless you persist it manually.

ðŸ”§ Solutions
Option A: Use localStorage or sessionStorage to persist form data
Save on change:

tsx
Copy
Edit
useEffect(() => {
  localStorage.setItem('formDraft', JSON.stringify(formData));
}, [formData]);
Restore on mount:

tsx
Copy
Edit
useEffect(() => {
  const saved = localStorage.getItem('formDraft');
  if (saved) {
    setFormData(JSON.parse(saved));
  }
}, []);
âœ… Works across refreshes â€” useful for long forms or drafts.

Option B: Use a form library that supports draft saving
Libraries like React Hook Form or Formik can integrate draft-saving patterns easily.

Option C: Use backend autosave
If the form data is critical (e.g., document editing), consider auto-saving to your backend every few seconds or on blur.

âœ… Summary
Concern	Solution
Page reload logs user out or shows /login	Block route rendering until auth.loading === false
User on page gets redirected to /login before session check finishes	Add a loading guard before route rendering
Mid-form refresh causes data loss	Persist form state to localStorage, sessionStorage, or backend autosave