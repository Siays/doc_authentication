authenticate doc
1. pagination
2. setState ( doc list depend on ic and type inputted.)



home page
1. filter list








1. understand how useReducer work
2. add arrow for navigate back to one hierarchy up
3. backend validation


















Solved
login
1. logout function haven't link
4. logged in but able to navigate back to /login, which suppose to back to home-page
6. On log out, still stay in home-page, also able to navigate back to home-page after logged out




7. what if the user is halfway entering data and refresh the page?


âœ… 7. What If User is Mid-Form and Refreshes the Page?
This is a broader UX concern and not specific to auth â€” form state is always lost on full refresh unless you persist it manually.

ðŸ”§ Solutions
Option A: Use localStorage or sessionStorage to persist form data
Save on change:

tsx
Copy
Edit
useEffect(() => {
  localStorage.setItem('formDraft', JSON.stringify(formData));
}, [formData]);
Restore on mount:

tsx
Copy
Edit
useEffect(() => {
  const saved = localStorage.getItem('formDraft');
  if (saved) {
    setFormData(JSON.parse(saved));
  }
}, []);
âœ… Works across refreshes â€” useful for long forms or drafts.

Option B: Use a form library that supports draft saving
Libraries like React Hook Form or Formik can integrate draft-saving patterns easily.

Option C: Use backend autosave
If the form data is critical (e.g., document editing), consider auto-saving to your backend every few seconds or on blur.

âœ… Summary
Concern	Solution
Page reload logs user out or shows /login	Block route rendering until auth.loading === false
User on page gets redirected to /login before session check finishes	Add a loading guard before route rendering
Mid-form refresh causes data loss	Persist form state to localStorage, sessionStorage, or backend autosave